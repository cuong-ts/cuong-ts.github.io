<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docs.cuong-dev.ml</title><link>http://docs.cuong-dev.ml/</link><description>Recent content on docs.cuong-dev.ml</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://docs.cuong-dev.ml/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>http://docs.cuong-dev.ml/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>(Hu)go Template Primer</title><link>http://docs.cuong-dev.ml/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>http://docs.cuong-dev.ml/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>http://docs.cuong-dev.ml/cheatsheet/bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cheatsheet/bash/</guid><description>Bash # #Getting started # hello.sh # #!/bin/bash VAR=&amp;#34;world&amp;#34; echo &amp;#34;Hello $VAR!&amp;#34; # =&amp;gt; Hello world! Execute the script
$ bash hello.sh Variables # NAME=&amp;#34;John&amp;#34; echo ${NAME} # =&amp;gt; John echo $NAME # =&amp;gt; John echo &amp;#34;$NAME&amp;#34; # =&amp;gt; John echo &amp;#39;$NAME&amp;#39; # =&amp;gt; $NAME echo &amp;#34;${NAME}!&amp;#34; # =&amp;gt; John! NAME = &amp;#34;John&amp;#34; # =&amp;gt; Error (about space) Comments # # This is an inline Bash comment. : &amp;#39; This is a very neat comment in bash &amp;#39; Multi-line comments use :' to open and ' to close</description></item><item><title/><link>http://docs.cuong-dev.ml/cheatsheet/docker-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cheatsheet/docker-cheatsheet/</guid><description>Docker # #Getting started # Getting started # Create and run a container in background
$ docker run -d -p 80:80 docker/getting-started -d - Run the container in detached mode -p 80:80 - Map port 80 to port 80 in the container docker/getting-started - The image to use Create and run a container in foreground
$ docker run -it -p 8001:8080 --name my-nginx nginx -it - Interactive bash mode -p 8001:8080 - Map port 8001 to port 8080 in the container --name my-nginx - Specify a name nginx - The image to use General commands # docker ps List running containers docker ps -a List all containers docker ps -s List running containers (with CPU / memory) docker images List all images docker exec -it &amp;lt;container&amp;gt; bash Connecting to container docker logs &amp;lt;container&amp;gt; Shows container&amp;rsquo;s console log docker stop &amp;lt;container&amp;gt; Stop a container docker restart &amp;lt;container&amp;gt; Restart a container docker rm &amp;lt;container&amp;gt; Remove a container docker port &amp;lt;container&amp;gt; Shows container&amp;rsquo;s port mapping docker top &amp;lt;container&amp;gt; List processes docker kill &amp;lt;container&amp;gt; Kill a container Parameter &amp;lt;container&amp;gt; can be container id or name</description></item><item><title/><link>http://docs.cuong-dev.ml/cheatsheet/grep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cheatsheet/grep/</guid><description>Grep # #Getting started # Usage # Search standard output (i.e. a stream of text)
$ grep [options] search_string Search for an exact string in file:
$ grep [options] search_string path/to/file Print lines in myfile.txt containing the string &amp;ldquo;mellon&amp;rdquo;
$ grep &amp;#39;mellon&amp;#39; myfile.txt Wildcards are accepted in filename.
Option examples # -i grep -i ^DA demo.txt Forgets about case sensitivity -w grep -w &amp;ldquo;of&amp;rdquo; demo.txt Search only for the full word -A grep -A 3 &amp;lsquo;Exception&amp;rsquo; error.</description></item><item><title/><link>http://docs.cuong-dev.ml/ci-cd/argocd/ArgoCD-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/ci-cd/argocd/ArgoCD-cheatsheet/</guid><description>CLI Usage # argo list # List workflows argo submit [--watch] myworkflow.yaml # Create workflow argo submit myworkflow.yaml -p foo=bar # Create workflow with parameters argo submit myworkflow.yaml --parameter-file config.yaml argo submit myworkflow.yaml --entry-point &amp;quot;my-command&amp;quot; argo logs &amp;lt;pod&amp;gt; # Show workflow log argo delete &amp;lt;pod&amp;gt; # Delete workflow argo delete --all # Delete all workflows You can also use kubectl
kubectl get wf # List workflows kubectl delete wf &amp;lt;name&amp;gt; # Delete workflow Simple Workflow # apiVersion: argoproj.</description></item><item><title/><link>http://docs.cuong-dev.ml/ci-cd/jenkins/Jenkins-deploy-AWS-ECS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/ci-cd/jenkins/Jenkins-deploy-AWS-ECS/</guid><description>Jenkins deploy AWS ECS # Jenkins deploy AWS ECS
{% code title=&amp;ldquo;Jenkinsfile&amp;rdquo; %}
node { ws(&amp;#34;workspace/${env.JOB_NAME}/${env.BRANCH_NAME}&amp;#34;) { try { def imageTag def serviceName def taskFamily def dockerFilePrefix def clusterName def envName if (env.BRANCH_NAME == &amp;#34;dev&amp;#34;) { imageTag = &amp;#34;&amp;#34; serviceName = &amp;#34;&amp;#34; taskFamily = &amp;#34;&amp;#34; dockerFilePrefix = &amp;#34;&amp;#34; clusterName = &amp;#34;&amp;#34; envName = &amp;#34;&amp;#34; } if (env.BRANCH_NAME == &amp;#34;prod&amp;#34;) { imageTag = &amp;#34;&amp;#34; serviceName = &amp;#34;&amp;#34; taskFamily = &amp;#34;&amp;#34; dockerFilePrefix = &amp;#34;&amp;#34; clusterName = &amp;#34;&amp;#34; envName = &amp;#34;&amp;#34; } // Notify slack, new build started!</description></item><item><title/><link>http://docs.cuong-dev.ml/ci-cd/jenkins/jenkins-fix-report-cannot-view-on-browser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/ci-cd/jenkins/jenkins-fix-report-cannot-view-on-browser/</guid><description> Jenkins fix report cannot view on browser # System.setProperty(&amp;#34;hudson.model.DirectoryBrowserSupport.CSP&amp;#34;, &amp;#34;style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;;&amp;#34;)</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/aws/extend-the-file-system-of-ebs-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/aws/extend-the-file-system-of-ebs-volumes/</guid><description>Extend the file system of EBS volumes # To extend the file system of EBS volumes # Check disk [root@ip-10-69-13-54 ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 100G 0 disk └─xvda1 202:1 0 100G 0 part / For volumes that have a partition, such as the volumes shown in the previous step, use the growpart command to extend the partition. Notice that there is a space between the device name and the partition number.</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/aws/Install-docker-docker-compose-on-AWS-EC2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/aws/Install-docker-docker-compose-on-AWS-EC2/</guid><description>Install docker, docker-compose on AWS EC2 # {% code title=&amp;ldquo;install-ec2.sh&amp;rdquo; %}
yum install docker git -y sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.27.0/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose systemctl start docker systemctl enable docker sudo dd if=/dev/zero of=/swapfile bs=128M count=32 sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile echo &amp;#34;/swapfile swap swap defaults 0 0&amp;#34; &amp;gt;&amp;gt; /etc/fstab {% endcode %}</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/aws/install-cert-bot-ssl-letsencrypt-on-amz-linux-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/aws/install-cert-bot-ssl-letsencrypt-on-amz-linux-2/</guid><description>Install cert bot ssl let&amp;rsquo;sencrypt on amz linux 2 # Install epel &amp;amp; certbot (for nginx)
sudo amazon-linux-extras install epel sudo yum install certbot-nginx Get a free ssl cert, make sure to set your server IP point to your domain before hand.
sudo certbot --nginx -d your.domain.com Setup auto renew
Some Certbot packages do something like this to ensure it runs at a more random time (twice a day):</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/aws/mount-new-ebs-volume-to-aws-ec2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/aws/mount-new-ebs-volume-to-aws-ec2/</guid><description> Mount new EBS volume to AWS EC2 # The root device is /dev/xvda. The attached volume is /dev/xvdb, which is not yet mounted.
[ec2-user ~]$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk -xvda1 202:1 0 8G 0 part / xvdb 202:80 0 10G 0 disk TL;DR
sudo mkfs -t xfs /dev/xvdb sudo mkdir /data sudo mount /dev/xvdb /data ls -la /data</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/aws/setting-swap-ec2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/aws/setting-swap-ec2/</guid><description> Setting Swap EC2 # In this example dd command, the swap file is 4 GB (128 MB x 32):
sudo dd if=/dev/zero of=/swapfile bs=128M count=32 sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile sudo swapon -s echo &amp;#34;/swapfile swap swap defaults 0 0&amp;#34; &amp;gt;&amp;gt; /etc/fstab</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/azure/azure-new-service-update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/azure/azure-new-service-update/</guid><description> Azure new service update # 15.0.0 - 2042-12-03 # Fixed # Removed humans, they weren&amp;rsquo;t doing fine with animals. Changed # Animals are now super cute, all of them. 14.0.0 - 2042-10-06 # Added # Introduced animals into the world, we believe they&amp;rsquo;re going to be a neat addition.</description></item><item><title/><link>http://docs.cuong-dev.ml/cloud-provider/gcp/mistakes-to-avoid-when-using-google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/cloud-provider/gcp/mistakes-to-avoid-when-using-google-cloud/</guid><description>Mistakes to avoid when using Google Cloud # Google Cloud Platform is a suite of public cloud computing services offered by Google. The platform includes a range of hosted services for compute, storage and application development that run on Google hardware. Google Cloud Platform services can be used by software developers, cloud administrators and other enterprise IT professionals.
Avoid excessive use of default service accounts and primitive roles # IAM stands for identity and Access management[1], and it allows you to manage access control by defining who (identity) has what access (role) to which resources.</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/docker/Best-practices-for-building-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/docker/Best-practices-for-building-containers/</guid><description>Best practices for building containers # Dockerfile tips and tricks # Consider the example below.
FROM debian # Copy application files COPY . /app # Install required system packages RUN apt-get update RUN apt-get -y install imagemagick curl software-properties-common gnupg vim ssh RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - RUN apt-get -y install nodejs # Install NPM dependencies RUN npm install --prefix /app EXPOSE 80 CMD [&amp;#34;npm&amp;#34;, &amp;#34;start&amp;#34;, &amp;#34;--prefix&amp;#34;, &amp;#34;app&amp;#34;] It takes 127.</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/docker/checking-file-when-build-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/docker/checking-file-when-build-docker/</guid><description> Checking file when build docker # Build this Dockerfile
FROM busybox RUN mkdir /tmp/build/ COPY . /tmp/build/ RUN du -ah tmp/build | sort -n -r | head -n 100 docker build .</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/docker/disstroless-docker-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/docker/disstroless-docker-image/</guid><description> Disstroless docker image # FROM golang:1.12 as build-env WORKDIR /go/src/app ADD . /go/src/app RUN go get -d -v ./... RUN go build -o /go/bin/app FROM gcr.io/distroless/base COPY --from=build-env /go/bin/app / CMD [&amp;#34;/app&amp;#34;]</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/docker/docker-how-to-cleanup-unused-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/docker/docker-how-to-cleanup-unused-resources/</guid><description>Docker - How to cleanup (unused) resources # Docker - How to cleanup (unused) resources # Once in a while, you may need to cleanup resources (containers, volumes, images, networks) &amp;hellip;
delete volumes # // see: https://github.com/chadoe/docker-cleanup-volumes $ docker volume rm $(docker volume ls -qf dangling=true) $ docker volume ls -qf dangling=true | xargs -r docker volume rm delete networks # $ docker network ls $ docker network ls | grep &amp;#34;bridge&amp;#34; $ docker network rm $(docker network ls | grep &amp;#34;bridge&amp;#34; | awk &amp;#39;/ / { print $1 }&amp;#39;) remove docker images # // see: http://stackoverflow.</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/docker/quick-install-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/docker/quick-install-docker/</guid><description> Quick install docker # install docker with yum:
$ yum install docker add your user to docker group to able run docker command
$ sudo usermod -a -G docker your_user make sure docker run on start up
systemctl enable docker service docker start</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/docker/remove-unused-docker-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/docker/remove-unused-docker-resource/</guid><description> Remove unused docker resource # TL;DR # remove all the things, such as images, container, network:
$ docker system prune stop all container running:
$ docker stop $(docker ps -q) remove all container:
$ docker rm $(docker ps -a -q) remove unused volumes:
$ docker volume prune remove unused images:
$ docker image prune</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/k8s/kubectl-tips-and-tricks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/k8s/kubectl-tips-and-tricks/</guid><description>Kubectl productivity # Kubectl alias:
Some of the 800 generated aliases are:
alias k=&amp;#39;kubectl&amp;#39; alias kg=&amp;#39;kubectl get&amp;#39; alias kgpo=&amp;#39;kubectl get pod&amp;#39; alias ksysgpo=&amp;#39;kubectl --namespace=kube-system get pod&amp;#39; alias krm=&amp;#39;kubectl delete&amp;#39; alias krmf=&amp;#39;kubectl delete -f&amp;#39; alias krming=&amp;#39;kubectl delete ingress&amp;#39; alias krmingl=&amp;#39;kubectl delete ingress -l&amp;#39; alias krmingall=&amp;#39;kubectl delete ingress --all-namespaces&amp;#39; alias kgsvcoyaml=&amp;#39;kubectl get service -o=yaml&amp;#39; alias kgsvcwn=&amp;#39;watch kubectl get service --namespace&amp;#39; alias kgsvcslwn=&amp;#39;watch kubectl get service --show-labels --namespace&amp;#39; Install:
wget https://raw.githubusercontent.com/ahmetb/kubectl-aliases/master/.kubectl_aliases echo &amp;#34;source ~/.</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/k8s/Linkerd-Cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/k8s/Linkerd-Cheatsheet/</guid><description>Linkerd Cheatsheet # Uninject # Remove the Linkerd proxy from a Kubernetes config.
You can uninject resources contained in a single file, inside a folder and its sub-folders, or coming from stdin.
Examples # # Uninject all the deployments in the default namespace. kubectl get deploy -o yaml | linkerd uninject - | kubectl apply -f - # Download a resource and uninject it through stdin. curl http://url.to/yml | linkerd uninject - | kubectl apply -f - # Uninject all the resources inside a folder and its sub-folders.</description></item><item><title/><link>http://docs.cuong-dev.ml/containers/k8s/quick-scale-deployment-accross-namespaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/containers/k8s/quick-scale-deployment-accross-namespaces/</guid><description> quick scale deployment accross namespaces # k get deploy | awk &amp;#39;NR &amp;gt; 1 {print $1}&amp;#39; | xargs -n1 kubectl scale deploy --replicas=0</description></item><item><title/><link>http://docs.cuong-dev.ml/databases/General-Table-Size-Information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/databases/General-Table-Size-Information/</guid><description>Postgres General Table Size Information # This will report size information for all tables, in both raw bytes and &amp;ldquo;pretty&amp;rdquo; form.
SELECT *, pg_size_pretty(total_bytes) AS total , pg_size_pretty(index_bytes) AS index , pg_size_pretty(toast_bytes) AS toast , pg_size_pretty(table_bytes) AS table FROM ( SELECT *, total_bytes-index_bytes-coalesce(toast_bytes,0) AS table_bytes FROM ( SELECT c.oid,nspname AS table_schema, relname AS table_name , c.reltuples AS row_estimate , pg_total_relation_size(c.oid) AS total_bytes , pg_indexes_size(c.oid) AS index_bytes , pg_total_relation_size(reltoastrelid) AS toast_bytes FROM pg_class c LEFT JOIN pg_namespace n ON n.</description></item><item><title/><link>http://docs.cuong-dev.ml/databases/install-postgres-client-amazon-linux-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/databases/install-postgres-client-amazon-linux-1/</guid><description> Install postgres client Amazon Linux 1 # Getting Super Powers # Becoming a super hero is a fairly straight forward process:
wget https://download.postgresql.org/pub/repos/yum/12/redhat/rhel-6-x86_64/postgresql12-libs-12.1-1PGDG.rhel6.x86_64.rpm wget https://download.postgresql.org/pub/repos/yum/12/redhat/rhel-6-x86_64/postgresql12-devel-12.1-1PGDG.rhel6.x86_64.rpm wget https://download.postgresql.org/pub/repos/yum/12/redhat/rhel-6-x86_64/postgresql12-12.1-1PGDG.rhel6.x86_64.rpm wget https://download.postgresql.org/pub/repos/yum/12/redhat/rhel-6-x86_64/postgresql12-server-12.1-1PGDG.rhel6.x86_64.rpm yum localinstall *.rp</description></item><item><title/><link>http://docs.cuong-dev.ml/databases/postgres-create-user-and-grant-permistions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/databases/postgres-create-user-and-grant-permistions/</guid><description> Postgres create user and grant permistions # List all user: # \du List all schema: # \dn Create user read_only # create user ro_user with password &amp;#39;pass_123&amp;#39;; Grant permistion on schema # grant usage on schema common to ro_user; grant select on all tables in schema common to ro_user; ALTER DEFAULT PRIVILEGES IN SCHEMA common GRANT SELECT ON TABLES TO ro_user;</description></item><item><title/><link>http://docs.cuong-dev.ml/linux/check-ssl-certificate-expiration-date-s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/linux/check-ssl-certificate-expiration-date-s/</guid><description>Check SSL certificate expiration date(s) # prepare checkssl.sh file with content bellow:
{% code title=&amp;ldquo;checkssl.sh&amp;rdquo; %}
#!/bin/bash # By B Shea Dec2018 &amp;amp; Mar2020 # https://www.holylinux.net # Test for OpenSSL - if not installed stop here. if ! [[ -x $(which openssl) ]]; then printf &amp;#34;\nOpenSSL not found or not executable.\nPlease install OpenSSL before proceeding.\n\n&amp;#34; exit 1 fi ### user adjustable variables ### #openssl query timeout: openssl_timeout=&amp;#34;timeout 10&amp;#34; # 30 days is default on warnings - overidden on command line with &amp;#39;-d&amp;#39;: days_to_warn=30 # default name for file lists sitelist=.</description></item><item><title/><link>http://docs.cuong-dev.ml/linux/Convert-service-account-json-to-single-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/linux/Convert-service-account-json-to-single-line/</guid><description> Convert service account json to single line # jq &amp;#39;.&amp;#39; service-account.json | jq -sR &amp;#39;.&amp;#39;</description></item><item><title/><link>http://docs.cuong-dev.ml/linux/dynamic-port-mapping-for-access-ftp-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/linux/dynamic-port-mapping-for-access-ftp-server/</guid><description>Dynamic port mapping for access FTP server # Getting Super Powers # 1/ Dynamic port mapping for access FTP server:
$ ssh -D 2121 -N -f user@10.12.133.3 {% hint style=&amp;ldquo;info&amp;rdquo; %} Super-powers are granted randomly so please submit an issue if you&amp;rsquo;re not happy with yours. {% endhint %}
2/ Setting sock proxy on filezila client:
3/ Using Filezilla as normal</description></item><item><title/><link>http://docs.cuong-dev.ml/linux/print-all-duplicated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/linux/print-all-duplicated/</guid><description> Print all duplicated lines in a file # linux #awk #text processing # How to print all duplicated lines in some text file? Let me introduce awk again:
&amp;lt; input.txt awk &amp;#39;foo[$0]++&amp;#39;</description></item><item><title/><link>http://docs.cuong-dev.ml/linux/quick-load-.env-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/linux/quick-load-.env-file/</guid><description> Quick load .env file # TL;DR # Load .env and ignore comment line start with #
$ export $(grep -v &amp;#39;^#&amp;#39; .env | xargs) For unset all of the variables defined in the file , use this:
$ unset $(grep -v &amp;#39;^#&amp;#39; .env | sed -E &amp;#39;s/(.*)=.*/\1/&amp;#39; | xargs)</description></item><item><title/><link>http://docs.cuong-dev.ml/linux/writing-bash-shell-scripts-best-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/linux/writing-bash-shell-scripts-best-practice/</guid><description>Writing bash shell scripts best practice # Many people hack together shell scripts quickly to do simple tasks, but these soon take on a life of their own. Unfortunately shell scripts are full of subtle effects which result in scripts failing in unusual ways. It’s possible to write scripts which minimise these problems. In this article, I explain several techniques for writing robust bash scripts.
Use set -u # How often have you written a script that broke because a variable wasn’t set?</description></item><item><title/><link>http://docs.cuong-dev.ml/observability/monitoring/alert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/observability/monitoring/alert-manager/</guid><description>Alert manager # {% code title=&amp;ldquo;alertmanager.yml&amp;rdquo; %}
global: resolve_timeout: 1m slack_api_url: &amp;#39;https://hooks.slack.com/services/xxx&amp;#39; route: # When a new group of alerts is created by an incoming alert, wait at # least &amp;#39;group_wait&amp;#39; to send the initial notification. # This way ensures that you get multiple alerts for the same group that start # firing shortly after another are batched together on the first # notification. group_wait: 10s # When the first notification was sent, wait &amp;#39;group_interval&amp;#39; to send a batch # of new alerts that started firing for that group.</description></item><item><title/><link>http://docs.cuong-dev.ml/observability/monitoring/install-node_exporter-as-systemd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/observability/monitoring/install-node_exporter-as-systemd/</guid><description> Install node_exporter as systemd # sudo useradd --system --shell /bin/false node_exporter curl -fsSL https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz \ | sudo tar -zxvf - -C /usr/local/bin --strip-components=1 node_exporter-1.1.2.linux-amd64/node_exporter \ &amp;amp;&amp;amp; sudo chown node_exporter:node_exporter /usr/local/bin/node_exporter sudo tee /etc/systemd/system/node_exporter.service &amp;lt;&amp;lt;&amp;#34;EOF&amp;#34; [Unit] Description=Node Exporter [Service] User=node_exporter Group=node_exporter EnvironmentFile=-/etc/sysconfig/node_exporter ExecStart=/usr/local/bin/node_exporter $OPTIONS [Install] WantedBy=multi-user.target EOF sudo systemctl daemon-reload &amp;amp;&amp;amp; \ sudo systemctl start node_exporter &amp;amp;&amp;amp; \ sudo systemctl status node_exporter &amp;amp;&amp;amp; \ sudo systemctl enable node_exporter</description></item><item><title/><link>http://docs.cuong-dev.ml/others/alert-slack-by-hook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/others/alert-slack-by-hook/</guid><description>Alert slack by hook # Send slack alert
#!/bin/bash curl https://hooks.slack.com/services/xxx \ -X POST -H &amp;#34;Content-type: application/json&amp;#34; \ -d @- &amp;lt;&amp;lt; EOF { &amp;#34;channel&amp;#34;: &amp;#34;$1&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;$2&amp;#34;, &amp;#34;color&amp;#34;: &amp;#34;danger&amp;#34;, &amp;#34;icon_emoji&amp;#34;: &amp;#34;:ghost:&amp;#34;, &amp;#34;pretext&amp;#34;: &amp;#34;$MONIT_DATE&amp;#34;, &amp;#34;text&amp;#34;: &amp;#34;$MONIT_SERVICE - $MONIT_DESCRIPTION&amp;#34; } EOF Send slack alert with RAM usage
#!/bin/bash LOG_FILE_PATH=&amp;#34;/var/log/memory_$(date &amp;#39;+%Y-%m-%d-%H&amp;#39;).log&amp;#34; date | sudo tee -a $LOG_FILE_PATH ps -eo rss,pid,user,command | sort -rn | head -20 | awk &amp;#39;{ hr[1024**2]=&amp;#34;GB&amp;#34;; hr[1024]=&amp;#34;MB&amp;#34;; for (x=1024**3; x&amp;gt;=1024; x/=1024) { if ($1&amp;gt;=x) { printf (&amp;#34;%-6.</description></item><item><title/><link>http://docs.cuong-dev.ml/others/install-redmine-on-centos-7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/others/install-redmine-on-centos-7/</guid><description>Install redmine on centos 7 # Requirements # centos 7
[root@new-redmine ~]# cat /etc/os-release NAME=&amp;#34;CentOS Linux&amp;#34; VERSION=&amp;#34;7 (Core)&amp;#34; ID=&amp;#34;centos&amp;#34; ID_LIKE=&amp;#34;rhel fedora&amp;#34; VERSION_ID=&amp;#34;7&amp;#34; PRETTY_NAME=&amp;#34;CentOS Linux 7 (Core)&amp;#34; mariadb 5.5.68
[root@new-redmine ~]# mysql --version mysql Ver 15.1 Distrib 5.5.68-MariaDB, for Linux (x86_64) using readline 5.1 rbenv installed, ruby 2.5.5
[redmine@new-redmine ~]$ rbenv --version rbenv 1.1.2-40-g62d7798 [redmine@new-redmine current]$ rbenv version 2.5.5 (set by /opt/redmine/current/.ruby-version) redmine version 4.1.1
ssh keypair setup https://docs.gitlab.com/ee/ssh/README.html
Install redmine # Install dependencies</description></item><item><title/><link>http://docs.cuong-dev.ml/secret-management/vault/Vault-import-export-secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/secret-management/vault/Vault-import-export-secrets/</guid><description>Vault import, export secrets # ./medusa export path --address=&amp;#34;https://vault-url.com&amp;#34; --token=&amp;#34;s.xxx&amp;#34; --format=&amp;#34;yaml&amp;#34; &amp;gt; export.yaml ./medusa import path ./export.yaml --address=&amp;#34;https://https://vault-url.com&amp;#34; --token=&amp;#34;s.xxx&amp;#34; REF: https://github.com/jonasvinther/medusa</description></item></channel></rss>