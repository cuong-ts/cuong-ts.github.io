<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cuong Blogs</title><link>http://docs.cuong-dev.ml/docs/linux/</link><description>Recent content on Cuong Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://docs.cuong-dev.ml/docs/linux/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://docs.cuong-dev.ml/docs/linux/check-ssl-certificate-expiration-date-s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/docs/linux/check-ssl-certificate-expiration-date-s/</guid><description>Check SSL certificate expiration date(s) # prepare checkssl.sh file with content bellow:
{% code title=&amp;ldquo;checkssl.sh&amp;rdquo; %}
#!/bin/bash # By B Shea Dec2018 &amp;amp; Mar2020 # https://www.holylinux.net # Test for OpenSSL - if not installed stop here. if ! [[ -x $(which openssl) ]]; then printf &amp;#34;\nOpenSSL not found or not executable.\nPlease install OpenSSL before proceeding.\n\n&amp;#34; exit 1 fi ### user adjustable variables ### #openssl query timeout: openssl_timeout=&amp;#34;timeout 10&amp;#34; # 30 days is default on warnings - overidden on command line with &amp;#39;-d&amp;#39;: days_to_warn=30 # default name for file lists sitelist=.</description></item><item><title/><link>http://docs.cuong-dev.ml/docs/linux/dynamic-port-mapping-for-access-ftp-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/docs/linux/dynamic-port-mapping-for-access-ftp-server/</guid><description>Dynamic port mapping for access FTP server # Getting Super Powers # 1/ Dynamic port mapping for access FTP server:
$ ssh -D 2121 -N -f user@10.12.133.3 {% hint style=&amp;ldquo;info&amp;rdquo; %} Super-powers are granted randomly so please submit an issue if you&amp;rsquo;re not happy with yours. {% endhint %}
2/ Setting sock proxy on filezila client:
3/ Using Filezilla as normal</description></item><item><title/><link>http://docs.cuong-dev.ml/docs/linux/print-all-duplicated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/docs/linux/print-all-duplicated/</guid><description>Print all duplicated lines in a file # linux #awk #text processing # How to print all duplicated lines in some text file? Let me introduce awk again:
&amp;lt; input.txt awk &amp;#39;foo[$0]++&amp;#39;</description></item><item><title/><link>http://docs.cuong-dev.ml/docs/linux/quick-load-.env-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/docs/linux/quick-load-.env-file/</guid><description>Quick load .env file # TL;DR # Load .env and ignore comment line start with #
$ export $(grep -v &amp;#39;^#&amp;#39; .env | xargs) For unset all of the variables defined in the file , use this:
$ unset $(grep -v &amp;#39;^#&amp;#39; .env | sed -E &amp;#39;s/(.*)=.*/\1/&amp;#39; | xargs)</description></item><item><title/><link>http://docs.cuong-dev.ml/docs/linux/writing-bash-shell-scripts-best-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.cuong-dev.ml/docs/linux/writing-bash-shell-scripts-best-practice/</guid><description>Writing bash shell scripts best practice # Many people hack together shell scripts quickly to do simple tasks, but these soon take on a life of their own. Unfortunately shell scripts are full of subtle effects which result in scripts failing in unusual ways. It’s possible to write scripts which minimise these problems. In this article, I explain several techniques for writing robust bash scripts.
Use set -u # How often have you written a script that broke because a variable wasn’t set?</description></item></channel></rss>